"""
The MIT License (MIT)

Copyright (c) 2015 Kim Blomqvist

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

"""

from yasha.parsers import Parser
import xml.etree.ElementTree as ET

def element_text(element, default=None):
	if element == None:
		return default
	return element.text

class CmsisParser(Parser):
	file_extension = [".xml"]
	use_fields = True
	use_enumvalues = True

	def parse_size(self, element, default=None):
		return element_text(element, default)

	def parse_access(self, element, default=None):
		access = element_text(element, default)
		if access == "read-only":
			return "ro"
		if access == "write-only":
			return "wo"
		if access == "read-write":
			return "rw"
		return access

	def parse_interrupt(self, element):
		if not element:
			return None
		interrupt = {
			"name": element.find("name"),
			"value": element.find("value")
		}
		return interrupt

	def parse_enumvalues(self, element):
		if not self.use_enumvalues or not element:
			return []

		enums = []
		for e in element.findall("enumeratedValue"):
			d = {
				"name": e.find("name").text,
				"value": e.find("value").text,
			}
			enums.append(d)

		return enums

	def parse_fields(self, element, register):
		if not self.use_fields or not element:
			return []

		fields = []
		for f in element.findall("field"):
			field = {
				"name": f.find("name").text,
				"range": {
					"msb": f.find("msb").text,
					"lsb": f.find("lsb").text,
				},
				"enums": self.parse_enumvalues(f.find("enumeratedValues")),
				"access": self.parse_access(f.find("access"), register["access"])
			}
			if field["range"]["msb"] == field["range"]["lsb"]:
				field["range"]["pattern"] = field["range"]["lsb"]
			else:
				field["range"]["pattern"] = field["range"]["lsb"] + ".." + field["range"]["msb"]
			fields.append(field)

		return fields

	def parse_registers(self, element, peripheral):
		if not element:
			return []

		registers = []
		for r in element.findall("register"):
			register = {
				"name"  : r.find("name").text,
				"offset": r.find("addressOffset").text,
				"size"  : self.parse_size(r.find("size"), peripheral["size"]),
				"access": self.parse_access(r.find("access"), peripheral["access"]),
			}

			fields = self.parse_fields(r.find("fields"), register)
			register["fields"] = fields

			registers.append(register)

		return registers

	def parse(self, file):
		tree = ET.parse(file.name)
		root = tree.getroot()

		periphs = {}
		periphs_order = []
		derived_periphs = []

		device = {
			"size": element_text(root.find("size")),
			"access": element_text(root.find("access")),
		}

		for elem in root.iter("peripheral"):
			periph = {
				"name"   : elem.find("name").text,
				"baseadr": elem.find("baseAddress").text,
				"size"   : self.parse_size(elem.find("size"), device["size"]),
				"access" : self.parse_access(elem.find("access"), device["access"]),
				"interrupt": self.parse_interrupt(elem.find("interrupt")),
			}

			if "derivedFrom" in elem.attrib:
				periph["derived_from"] = elem.attrib["derivedFrom"]
				derived_periphs.append(periph["name"])

			registers = self.parse_registers(elem.find("registers"), periph)
			periph["registers"] = registers

			periphs[periph["name"]] = periph
			periphs_order.append(periph["name"])

		for derived in [periphs[name] for name in derived_periphs]:
			base = periphs[derived["derived_from"]].copy()
			base["name"] = derived["name"]
			base["baseadr"] = derived["baseadr"]
			periphs[derived["name"]] = base

		vars = {
			"peripherals": [periphs[name] for name in periphs_order],
		}
		return vars
